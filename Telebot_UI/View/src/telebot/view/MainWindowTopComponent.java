/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package telebot.view;

import java.awt.BorderLayout;
import java.awt.Dimension;
import javafx.embed.swing.JFXPanel;
import javafx.geometry.HPos;
import javafx.geometry.Insets;
import javafx.geometry.VPos;
import javafx.scene.Node;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.Priority;
import javax.swing.JSplitPane;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;



/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//telebot.view//MainWindow//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "MainWindowTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "editor", openAtStartup = true)
@ActionID(category = "Window", id = "telebot.view.MainWindowTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_MainWindowAction",
        preferredID = "MainWindowTopComponent"
)
@Messages({
    "CTL_MainWindowAction=MainWindow",
    "CTL_MainWindowTopComponent=MainWindow Window",
    "HINT_MainWindowTopComponent=This is a MainWindow window"
})
public final class MainWindowTopComponent extends TopComponent {
   
    public static final JFXPanel fingersFXPanel  = new JFXPanel();
    public static final JFXPanel partsFXPanel = new JFXPanel();
    
    public static final int WIDTH_VALUE = 1024;
    public static final int HEIGHT_VALUE = 768;
    
    public MainWindowTopComponent() {
        initComponents();
        setName(Bundle.CTL_MainWindowTopComponent());
        setToolTipText(Bundle.HINT_MainWindowTopComponent());
        setLayout(new BorderLayout());
        setPreferredSize(new Dimension(WIDTH_VALUE,HEIGHT_VALUE));
//        fingers = new Fingers_UI(new BorderLayout());
//        fingers1 = new Fingers_UI(new BorderLayout());
        
        
        
        
        
        
//        JSplitPane splitPanel = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT);
//        splitPanel.setRightComponent(fingers);
//        splitPanel.setLeftComponent(fingers1);
        
//        GridPane grid = new GridPane();
//        grid.setPadding(new Insets(5));
//        grid.setVgap(5);
//        grid.setHgap(5);
//        //GridPane.setConstraints(fingers,0,0,0,0,HPos.CENTER, VPos.CENTER, Priority.ALWAYS, Priority.ALWAYS);
//        
//        grid.add(, WIDTH, WIDTH);
//        add(splitPanel);
        
       
        
        
    }
    
//    public void addFingers(){
//        fingers = new Fingers_UI(new BorderLayout());
//    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 994, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 533, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
}
